<%

/**
WebExtBrowserCompat.ejs
-----------------------
Use this macro to insert the appropriate WebExtension compat table for the
current page.

It takes one optional argument.

* If the argument is given, the macro calls tableFromArgument(), which uses
the argument to get the right chunk of JSON data for the table. Currently
this function only supports tables for manifest.json keys.

* If the argument is omitted, the macro calls tableFromSlug(), which uses
the slug of the current page to get the right chunk of JSON data for the
table. The no-argument form is only allowed on pages under
"Add-ons/WebExtensions/API/".
*/

/**
The tableFromArgument() function takes a single argument, which must be
a string that traces a path through the browser compat data.
The string may be either of:

    * "webextensions.manifest". In this case the function generates an
    agregate table for all manifest keys.

    * "webextensions.manifest.<KEY-NAME>", where <KEY-NAME> is the name
    of a manifest key, like "applications" or "content_scripts". In this case
    the function generates a table for the given manifest key.
*/
function tableFromArgument(path) {
  var path = $0; // "webextensions.manifest.applications"
  var pathComponents = path.split(".");
  // first, validate the argument
  // there must be at least "webextensions" and "manifest"
  if (pathComponents.length < 2 ||
    !((pathComponents[0] === "webextensions") && (pathComponents[1] === "manifest"))) {
    throw "If an argument is given it must point to WebExtensions manifest data.";
  }
  const manifestDataUrl = "https://raw.githubusercontent.com/mdn/browser-compat-data/master/webextensions/manifest-keys.json";
  // if the argument does not specify a manifest key, generate the aggregate table
  if (pathComponents.length === 2) {
    const manifestBaseUrl = "Add-ons/Extensions/manifest.json";
    compatJson = mdn.fetchJSONResource(manifestDataUrl).data.webextensions.manifest;
    return template("WebExtBrowserCompatTable", [compatJson, manifestBaseUrl]);
  } else {
  // otherwise, use the given manifest key to generate the feature table
    compatJson = mdn.fetchJSONResource(manifestDataUrl).data.webextensions.manifest[pathComponents[2]];
    return template("WebExtBrowserCompatTable", [compatJson]);
  }
}

/**
This function transforms the URL of the current page into a path through
the compat data, and uses this path to retrieve the appropriate bit of data.
For example:

https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/alarms
...would become data["alarms"]

https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/alarms/get
...would become data["alarms"]["get"]

One tricky detail is that it needs to handle the devtools APIs, which name
themselves "devtools.thing":

https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/devtools.panels
...would become data["devtools"]["panels"]

It then passes the compat data into "WebExtBrowserCompatTable", which
builds the table.

This function may only be called from pages under "Add-ons/WebExtensions/API/".
*/
function tableFromSlug() {
  const url = "https://raw.githubusercontent.com/mdn/browser-compat-data/master/webextensions/javascript-apis.json";
  const webExtAPIBaseUrl = "Add-ons/Extensions/API/";

  // Pages that include this macro must be under
  // the "Add-ons/WebExtensions/API/" hierarchy.
  // So first, let's get the part of the URL following that subpath, or fail.
  var components = env.slug.split(webExtAPIBaseUrl);
  if (components.length < 2) {
    throw "If no arguments are given, then this macro can only be called from pages under \"Add-ons/WebExtensions/API/\"";
  }

  // Now we're looking at a subpath like:
  // "Alarms" or "Alarms/clear" or "storage/StorageArea/get"
  // or even "devtools.panels/ExtensionPanel"
  // So split this subpath on either "/" or ".":
  pathPieces = components[1].split(/[\.//]/);

  // Now we can use pathPieces to walk through the compat data
  var compatJson = mdn.fetchJSONResource(url).data.webextensions.api;
  for (piece of pathPieces) {
    compatJson = compatJson[piece];
  }

  return template("WebExtBrowserCompatTable", [compatJson, env.slug]);
}

var output;

if ($0) {
  output = tableFromArgument($0);
} else {
  output = tableFromSlug();
}

%>
<%-output%>
