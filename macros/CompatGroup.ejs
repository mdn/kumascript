<%

/*

Builds a compat table for all the properties in a CSS module.

Parameters:

$0 â€“ The name of a CSS module, which should match one of the values of the
`groups` property in https://github.com/mdn/data/blob/master/css/properties.json.
This is based on the name of a CSS module, like:

"CSS Color"
"CSS Box Model"
"CSS Backgrounds and Borders"
"CSS Grid Layout"

This macro uses https://github.com/mdn/data/blob/master/css/properties.json
to retrieve JSON __compat objects the properties in the given module, then calls
CompatRender to build a compat table containing those properties.

Example calls:

{{CompatGroup("CSS Grid Layout")}}
{{CompatGroup("CSS Flexible Box Layout")}}

*/

const bcd = require('mdn-browser-compat-data');
const urlProperties = 'https://raw.githubusercontent.com/mdn/data/master/css/properties.json';
const data = {
  'css.properties': mdn.fetchJSONResource(urlProperties)
};

/*
Get compat data using a query string like 'webextensions.api.alarms'
*/
function getData(queryString, obj) {
  return queryString.split('.').reduce(function(prev, curr) {
    return prev ? prev[curr] : undefined
  }, obj);
}

let itemsForGroup = [];

/*
Populate `itemsForGroup` with an array of BCD keys relevant to the given group.
*/
Object.keys(data).forEach(type => {
  Object.keys(data[type]).forEach(featureKey => {
    let {groups} = data[type][featureKey];

    if (groups && groups.includes($0)) {
      itemsForGroup.push(`${type}.${featureKey}`)
    }
  })
})

const features = itemsForGroup.reduce((groupFeatures, query) => {
  const compatData = getData(query, bcd);
  const identifier = query.split('.').pop();

  if (compatData && compatData.__compat) {
    groupFeatures.push({
      [identifier]: compatData.__compat
    })
  }

  return groupFeatures;
}, []);

output = template('CompatRender', [$0, 1, features])

%>

<%- output %>
