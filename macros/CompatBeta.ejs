<%
/*

Retrieves MDN compat data for a given feature

Parameters

$0 – A query string indicating for which feature to retrieve compat data for.
$1 – A depth setting indicating how deep sub features should be added to the table
(flattened, default: 1, first level of sub feature data will be included).

Example calls

{{compat("webextensions.api.alarms")}}
{{compat("webextensions.api.alarms.Alarm")}}
{{compat("webextensions.manifest")}}
{{compat("webextensions.manifest.applications")}}
{{compat("css.properties.background-attachment")}}
{{compat("css.selectors.any-link")}}
{{compat("css.at-rules.font-face")}}
{{compat("http.headers.Cache-Control")}}
{{compat("http.status.404")}}
{{compat("http.method.CONNECT")}}
{{compat("api.WebGL2RenderingContext")}}
{{compat("api.WebGL2RenderingContext.beginQuery")}}
{{compat("html.elements.input")}}

{{compat("html.elements.link", 2)}}
{{compat("webextensions.api.alarms", 3)}}

*/

const bcd = require('mdn-browser-compat-data');
var query = $0;
var depth = $1 || 1;
var output = '';

var compatStrings = string.deserialize(template('L10n:CompatTable'));
var localize = mdn.getLocalString;

/*
Get compat data using a query string like "webextensions.api.alarms"
*/
function getData(queryString, obj) {
  return queryString.split('.').reduce(function(prev, curr) {
    return prev ? prev[curr] : undefined
  }, obj);
}

/*
Get features that should be displayed according to the query and the depth setting
Flatten them into a features array
*/
function traverseFeatures(obj, depth, identifier) {
  depth--;
  if (depth >= 0) {
    for (let i in obj) {
      if (!!obj[i] && typeof(obj[i])=='object' && i !== '__compat') {
        if (obj[i].__compat) {
            features.push({[identifier + i]: obj[i].__compat});
          }
          traverseFeatures(obj[i], depth, i + '.');
        }
      }
    }
  }

var compatData = getData(query, bcd);
var features = [];
var identifier = query.split(".").pop();

if (compatData && compatData.__compat) {
  compatData.__compat.description = localize(compatStrings, 'feature_basicsupport');
  features.push({[identifier]: compatData.__compat});
}

traverseFeatures(compatData, depth, '');

output = template('CompatRender', [query, depth, features])
%>
  <%-output%>
