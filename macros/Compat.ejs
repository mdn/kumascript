<%
/*

Retrieves MDN compat data for a given feature

Differentiates between aggregate compat tables and feature compat tables.
Aggregate tables use basic_support of the underlying features and have no notes
Feature tables display sub features and display notes

Parameters

  $0 – A query string indicating for which feature to retrieve compat data for.

Example calls

  {{compat("webextensions.api.alarms")}}
  {{compat("webextensions.api.alarms.Alarm")}}
  {{compat("webextensions.manifest")}}
  {{compat("webextensions.manifest.applications")}}
  {{compat("css.properties.background-attachment")}}
  {{compat("css.selectors.any-link")}}
  {{compat("css.at-rules.font-face")}}
  {{compat("http.headers.Cache-Control")}}
  {{compat("http.status.404")}}
  {{compat("http.method.CONNECT")}}
  {{compat("api.WebGL2RenderingContext")}}
  {{compat("api.WebGL2RenderingContext.beginQuery")}}
  {{compat("html.elements.input")}}

  {{compat("css.properties.background-*")}}
  (not implemented, just an idea for more advanced aggregate queries)

*/

const bcd = require('mdn-browser-compat-data');

var query = $0;
var output = '';

var compatStrings = string.deserialize(template('L10n:CompatTable'));
var localize = mdn.getLocalString;

var s_no_data_found = mdn.localString({
    'en-US': `No compatibility data found. Please contribute data for "${query}" to the <a href="https://github.com/mdn/browser-compat-data">MDN compatibility data repository</a>.`
});

var s_firefox_android = mdn.localString({
    'en-US': 'Firefox for Android'
});

var s_chrome_android = mdn.localString({
    'en-US': 'Chrome for Android'
});

const desktopBrowsers = {
  chrome: 'Chrome',
  firefox: 'Firefox',
  edge: 'Edge',
  ie: 'Internet Explorer',
  opera: 'Opera',
  safari: 'Safari',
  servo: 'Servo'
};

const mobileBrowsers = {
  webview_android: 'Android',
  chrome_android: s_chrome_android,
  edge_mobile: 'Edge mobile',
  firefox_android: s_firefox_android,
  ie_mobile: 'IE mobile',
  opera_android: 'Opera Android',
  safari_ios: 'iOS Safari',
}

var notesArray = [];

/*
Write the table header.

`browserPlatformType` is either "mobile" or "desktop"
`browserNames` is either the "mobileBrowsers" or "desktopBrowsers" object
*/
function writeTableHead(browserPlatformType, browserNames) {
  let browserNameKeys = Object.keys(browserNames);
  let output = `<div id="compat-${browserPlatformType}"><table class="compat-table"><thead><tr>`;
  output +=  `<th>${localize(compatStrings, 'feature')}</th>`
  for (let browserNameKey of browserNameKeys) {
    output += `<th>${browserNames[browserNameKey]}</th>`;
  }
  output += '</tr></thead>';
  return output;
}

/*
Given the value of `version_added` or `version_removed`, this returns
a string to appear in the table cell, like "Yes", "No" or "?"

`versionInfo` is either null, true, false or a string containing a version number
*/
function getVersionString(versionInfo) {
  switch (versionInfo) {
    case null:
      return `<span title="${localize(compatStrings, 'supportsShort_unknown_title')}"
              style="color: rgb(255, 153, 0);">${localize(compatStrings, 'supportsShort_unknown')}</span>`;
      break;
    case true:
      return `<span style="color: #888">(${localize(compatStrings, 'supportsShort_yes')})</span>`;
      break;
    case false:
      return `<span style="color: #f00">(${localize(compatStrings, 'supportsShort_no')})</span>`;
      break;
    default:
      return versionInfo;
  }
}

/*
Generate the note for a browser flag or preference
First checks version_added and version_removed to create a string indicating when
a preference setting is present. Then creates a (browser specific) string
for either a preference flag or a compile flag.

`supportData` is a support_statement
`browserId` is a compat_block browser ID
*/
function writeFlagsNote(supportData, browserId) {
  let output = '';

  const firefoxPrefs = 'To change preferences in Firefox, visit about:config.';
  const chromePrefs = 'To change preferences in Chrome, visit chrome://flags.';

  if (typeof(supportData.version_added) === 'string') {
    output = 'From version ' + supportData.version_added;
  }

  if (typeof(supportData.version_removed) === 'string') {
    if (output) {
      output += ' until version '+ supportData.version_removed + ' (exclusive): ';
    } else {
      output = 'Until version ' + supportData.version_removed + ' (exclusive): ';
    }
  } else {
    output += ', ';
  }

  let flagText = `this feature is behind the <code>${supportData.flag.name}</code>`;

  // value_to_set is optional
  let valueToSet = '';
  if (supportData.flag.value_to_set) {
    valueToSet = ` (needs to be set to <code>${supportData.flag.value_to_set}</code>)`;
  }

  if (supportData.flag.type === 'preference') {
    let prefSettings = '';
    switch (browserId) {
      case 'firefox':
      case 'firefox_android':
        prefSettings = firefoxPrefs;
        break;
      case 'chrome':
      case 'chrome_android':
        prefSettings = chromePrefs;
        break;
    }
    output += `${flagText} preference${valueToSet}. ${prefSettings}`;
  }

  if (supportData.flag.type === 'compile_flag') {
    output += `${flagText} compile flag${valueToSet}.`;
    }

  return output;
}


/*
Main function responsible for the contents of a support cell in the table.

`supportData` is a support_statement
`browserId` is a compat_block browser ID
`compatNotes` is collected Compatibility notes

*/
function writeSupportInfo(supportData, browserId, compatNotes) {
  let output = '';

  // browsers are optional in the data, display them as "?" in our table
  if (!supportData) {
    output = getVersionString(null);
  // we have support data, lets go
  } else {
    output += getVersionString(supportData.version_added);

    if (supportData.version_removed) {
      // We don't know when
      if (typeof(supportData.version_removed) === 'boolean' && supportData.version_removed) {
        output += '&nbsp;—?'
      } else { // We know when
        output += '&nbsp;— ' + supportData.version_removed;
      }
    }

    // Add prefix
    if (supportData.prefix) {
      output += `<span title="prefix" class="inlineIndicator prefixBox prefixBoxInline">
                      <a title="The name of this feature is prefixed with '${supportData.prefix}' as this
                      browser considers it experimental" href="/en-US/docs/Web/Guide/Prefixes">${supportData.prefix}
                      </a></span>`;
    }

    // Add alternative name
    if (supportData.alternative_name) {
      output += ` (as <code>${supportData.alternative_name}</code>)`;
    }

    // Add note anchors
    // There are two types of notes (notes, and flag notes).
    // Collect them and order them, before adding them to the cell
    let noteAnchors = [];

    // Generate notes, if any
    if (compatNotes && supportData.notes) {
      if (Array.isArray(supportData.notes)) {
        for (let note of supportData.notes) {
          let noteIndex = compatNotes.indexOf(note);
          noteAnchors.push(`<sup><a href="#compatNote_${noteIndex+1}">${noteIndex+1}</a></sup>`);
        }
      } else {
        let noteIndex = compatNotes.indexOf(supportData.notes);
        noteAnchors.push(`<sup><a href="#compatNote_${noteIndex+1}">${noteIndex+1}</a></sup>`);
      }
    }

    // there is a flag and it needs a note, too
    if (compatNotes && supportData.flag) {
      let flagNote = writeFlagsNote(supportData, browserId);
      let noteIndex = compatNotes.indexOf(flagNote);
      noteAnchors.push(`<sup><a href="#compatNote_${noteIndex+1}">${noteIndex+1}</a></sup>`);
    }
    noteAnchors = noteAnchors.sort();
    output += noteAnchors.join(' ');

  }
  return output;
}

/*
Generate an aggregate table that summarises the support status for the
individual features under the data it's passed.
Each row in the table will contain the "basic_support" data for a single feature.

`json_identifier` is an `identifier` JSON object.
*/
function writeAggregateTable(json_identifier, browserPlatformType, browserNames) {
  let output = writeTableHead(browserPlatformType, browserNames);
  output += '<tbody>';
  // add a row for each feature
  for (let featureName of Object.keys(json_identifier).sort()) {
    output += '<tr>';
    let featureData = json_identifier[featureName]['__compat'];
    // the first cell is the name of the feature
    output += `<td><code>${featureName}</code></td>`;
    // then one cell for each browser
    for (let browserNameKey of Object.keys(browserNames)) {
      let supportData = featureData['basic_support']['support'][browserNameKey];
      let supportInfo = '';
      // if supportData is an array, there are multiple support statements
      if (Array.isArray(supportData)) {
        for (let entry of supportData) {
          supportInfo += `<p>${writeSupportInfo(entry, browserNameKey)}</p>`;
        }
      } else { // there is just one support statement
        supportInfo = writeSupportInfo(supportData, browserNameKey);
      }
      output += `<td>${supportInfo}</td>`;
    }
    output += '</tr>';
  }
  output += '</tbody></table></div>';
  return output;
}

/*
Iterate into all "support" objects, and all browsers under them,
and collect all notes in an array, without duplicates.

`json_subfeature_set` is a `subfeature_set` JSON object.
*/
function collectCompatNotes(json_subfeature_set) {

  function pushNotes(supportEntry, browserName) {
    // collect notes
    if (supportEntry.hasOwnProperty('notes')) {
      let notes = supportEntry['notes'];
      if (Array.isArray(notes)) {
        for (let note of notes) {
          if (notesArray.indexOf(note) === -1) {
            notesArray.push(note);
          }
        }
      } else {
        if (notesArray.indexOf(notes) === -1) {
          notesArray.push(notes);
        }
      }
    }
    // collect flags
    if (supportEntry.hasOwnProperty('flag')) {
      let flagNote = writeFlagsNote(supportEntry, browserName);
      if (notesArray.indexOf(flagNote) === -1) {
        notesArray.push(flagNote);
      }
    }
  }

  for (let subfeature of Object.keys(json_subfeature_set)) {
    let support = json_subfeature_set[subfeature]['support'];
    for (let browserName of Object.keys(support)) {
      if (Array.isArray(support[browserName])) {
        for (let entry of support[browserName]) {
          pushNotes(entry, browserName);
        }
      } else {
          pushNotes(support[browserName], browserName);
      }
    }
  }
  return notesArray;
}

/*
For a single row, write all the cells that contain support data.
(That is, every cell in the row except the first, which contains
an identifier for the row,  like "Basic support".

`json_subfeature` is a `subfeature` JSON object.
*/
function writeSupportCells(json_subfeature, compatNotes, browserNames) {
  let output = '';

  for (let browserNameKey of Object.keys(browserNames)) {
    let supportData = json_subfeature['support'][browserNameKey];
    let supportInfo = '';
    // if supportData is an array, there are multiple support statements
    if (Array.isArray(supportData)) {
      for (let entry of supportData) {
        supportInfo += `<p>${writeSupportInfo(entry, browserNameKey, compatNotes)}</p>`;
      }
    } else if (supportData) { // there is just one support statement
      supportInfo = writeSupportInfo(supportData, browserNameKey, compatNotes);
    } else { // this browser has no info, it's unknown
      supportInfo = writeSupportInfo(null);
    }
    output += `<td>${supportInfo}</td>`;
  }
  return output;
}

/*
Generate a table that contains the detailed compat data for a single feature.
The first row will contain the "basic_support" data.
Any subsequent rows will contain "sub-feature" support data.

`json_subfeature_set` is a `subfeature_set` JSON object.
*/
function writeFeatureTable(json_subfeature_set, browserPlatformType, browserNames) {
  let compatNotes = collectCompatNotes(json_subfeature_set);
  let output = writeTableHead(browserPlatformType, browserNames);
  output += '<tbody>';
  // write basic support first
  output += `<tr><td>${localize(compatStrings, 'feature_basicsupport')}</td>`;
  output += `${writeSupportCells(json_subfeature_set["basic_support"], compatNotes, browserNames)}</tr>`;
  // then all the other sub-features, one per row
  for (let row of Object.keys(json_subfeature_set)) {
    if (row != 'basic_support') {
      var desc = json_subfeature_set[row].desc || row;
      output += `<tr><td><code>${desc}</code></td>`
      output += `${writeSupportCells(json_subfeature_set[row], compatNotes, browserNames)}</tr>`;
    }
  }
  output += '</tbody></table></div>';
  return output;
}

/*
 Write each compat note, with an `id` so it will be linked from the table.
*/
function writeNotes(json_subfeature_set) {
  let output = '';
  let compatNotes = collectCompatNotes(json_subfeature_set);
  for (let note of compatNotes) {
    let noteIndex = compatNotes.indexOf(note);
    output += `<p id=compatNote_${noteIndex+1}>${noteIndex+1}. ${note}</p>`;
  }
  return output;
}

/*
Get compat data using a query string like "webextensions.api.alarms"
*/
function getData(queryString, obj) {
  return queryString.split('.').reduce(function(prev, curr) {
    return prev ? prev[curr] : undefined
  }, obj);
}

var data = getData(query, bcd.data);

if (!data) {
  output = s_no_data_found;
} else {
  output = `<div class="htab">
              <a id="AutoCompatibilityTable" name="AutoCompatibilityTable"></a>
              <ul>
              <li class="selected">
                <a href="javascript:;">${localize(compatStrings, 'browserType_desktop')}</a>
              </li>
              <li>
                <a href="javascript:;">${localize(compatStrings, 'browserType_mobile')}</a>
              </li>
              </ul>
           </div>`;

  if (data.hasOwnProperty('__compat')) {
    output += writeFeatureTable(data['__compat'], 'desktop', desktopBrowsers);
    output += writeFeatureTable(data['__compat'], 'mobile', mobileBrowsers);
    output += writeNotes(data['__compat']);
  } else {
    output += writeAggregateTable(data, 'desktop', desktopBrowsers);
    output += writeAggregateTable(data, 'mobile', mobileBrowsers);
  }
}
%>
<%-output%>
