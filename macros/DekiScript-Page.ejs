<% module.exports = buildAPI({
    
    initialize: function (options) {
        BaseAPI.prototype.initialize.call(this, options);
        
        // Incomplete list of Page vars, but probably good enough.
        // See also: <http://developer.mindtouch.com/en/docs/DekiScript/Reference/Wiki_Functions_and_Variables/Page>
        this.setVars({
            date: new Date(env.modified),
            id: env.id,
            language: env.locale,
            name: env.slug,
            path: env.path,
            tags: env.tags,
            title: env.title,
            uri: env.url
        });
    },
    
    // Determines whether or not the page has the specified tag. Returns true
    // if it does, otherwise false. This is case-insensitive.
    //
    // Parameters:
    //  
    hasTag: function(aPage, aTag) {        
        // First, return false at once if there are no tags on the page
        
        if (aPage.tags == undefined || aPage.tags == null || aPage.tags.length == 0) {
            return false;
        }

        // Convert to lower case for comparing

        var theTag = aTag.toLowerCase();

        // Now look for a match
        
        for (var i=0; i<aPage.tags.length; i++) {
            if (aPage.tags[i].toLowerCase() == theTag) {
                return true;
            }
        }
        
        return false;
    },

    // http://developer.mindtouch.com/en/docs/DekiScript/Reference/Wiki_Functions_and_Variables/Page.Subpages
    // Optional path, defaults to current page
    // Optional depth. Number of levels of children to include, 0 is the path page
    // Optional self, defaults to false. Include the path page in the results
    subpages: function (path, depth, self) {
        var url = '';
        if (path) {
            var p = kuma.url.parse(env.url, true);
            url = p.protocol + '//' + p.host + encodeURI(path) + '$children';
        } else {
            url = env.url + '$children';
        }
        var depth_check = parseInt(depth);
        if(depth_check  >= 0) {
            url += '?depth=' + depth_check;
        }
        var mdn = require('MDN:Common');
        var subpages = mdn.fetchJSONResource(url);
        var result = [];
        if (subpages != null) {
            if (!self) {
                result = subpages.subpages || [];
            } else {
                result = [subpages];
            }
        }
        return result;
    },

    // http://developer.mindtouch.com/en/docs/DekiScript/Reference/Wiki_Functions_and_Variables/Page.Subpages
    // Optional path, defaults to current page
    // Optional depth. Number of levels of children to include, 0 is the path page
    // Optional self, defaults to false. Include the path page in the results
    subpagesExpand: function (path, depth, self) {
        var url = '';
        if (path) {
            var p = kuma.url.parse(env.url, true);
            url = p.protocol + '//' + p.host + encodeURI(path) + '$children';
        } else {
            url = env.url + '$children';
        }
        
        url += '?expand';
        
        var depth_check = parseInt(depth);
        if(depth_check  >= 0) {
            url += '&depth=' + depth_check;
        }
        var mdn = require('MDN:Common');
        var subpages = mdn.fetchJSONResource(url);
        var result = [];
        if (subpages != null) {
            if (!self) {
                result = subpages.subpages || [];
            } else {
                result = [subpages];
            }
        }
        return result;
    },
    
    // If reverse is non-zero, the sort is backward
    subPagesSort: function (pages, reverse) {
        if (reverse == 0) {
            pages.sort(alphanumForward);
        } else {
            pages.sort(alphanumBackward);
        }

        return pages;

        function chunkify(t) {
        	var tz = [], x = 0, y = -1, n = 0, i, j;

			while (i = (j = t.charAt(x++)).charCodeAt(0)) {
                var m = (i == 46 || (i >=48 && i <= 57));
				if (m !== n) {
					tz[++y] = "";
	    			n = m;
				}
				tz[y] += j;
			}
			return tz;
		}

        function alphanumForward(a, b) {

			var aa = chunkify(a.title);
			var bb = chunkify(b.title);

			for (x = 0; aa[x] && bb[x]; x++) {
				if (aa[x] !== bb[x]) {
					var c = Number(aa[x]), d = Number(bb[x]);
					if (c == aa[x] && d == bb[x]) {
						return c - d;
					} else return (aa[x] > bb[x]) ? 1 : -1;
				}
			}
			return aa.length - bb.length;
		}

        function alphanumBackward(a, b) {

    		var bb = chunkify(a.title);
			var aa = chunkify(b.title);

			for (x = 0; aa[x] && bb[x]; x++) {
				if (aa[x] !== bb[x]) {
					var c = Number(aa[x]), d = Number(bb[x]);
					if (c == aa[x] && d == bb[x]) {
						return c - d;
					} else return (aa[x] > bb[x]) ? 1 : -1;
				}
			}
			return aa.length - bb.length;
		}
    },
    
    // Flatten subPages list
    subPagesFlatten: function (pages) {
        
        var output = [];
        
        process_array(pages);

        return output;

        function process_array(arr) {
            if(arr.length) {
                arr.forEach(function(item) {
                    if (!item) { return; }
                    process_array(item.subpages || []);
                    // If only a header for a branch
                    if (item.url == "") {
                        return
                    }
                    item.subpages =[];
                    output.push(item);
                });
            }
        }
    },
    
    // If ordered is true, the output is an <ol> instead of <ul>
    //
    // Special note: If ordered is true, pages whose locale differs from
    // the current page's locale are omitted, to work around misplaced
    // localizations showing up in navigation.
    subPagesFormatList: function (pages, ordered) {
        return process_array(pages, ordered != 0);
        
        function process_array(arr, ordered) {
            var result = '';
            var openTag = '<ul>';
            var closeTag = '</ul>';
            
            if (ordered) {
                openTag = '<ol>';
                closeTag = '</ol>';
            }
            
            if(arr.length) {
                result += openTag;
                arr.forEach(function(item) {
                    if (!item) { return; }
                    if (ordered && (item.locale != locale)) { return; }
                    result += '<li>';
                    if (item.url != '') {
                        result += '<a href="' + item.url + '">' + kuma.htmlEscape(item.title) + '</a>';
                    } else {
                        result += item.title;
                    }
                    result += process_array(item.subpages || [], ordered) + '</li>';
                    
                });
                result += closeTag;
            }
            return result;
        }
        
    },
    
    translations: function (path) {
        var url = '';
        if (path) {
            var p = kuma.url.parse(env.url, true);
            url = p.protocol + '//' + p.host + encodeURI(path) + '$json';
        } else {
            url = env.url + '$json';
        }
        var mdn = require('MDN:Common');
        var json = mdn.fetchJSONResource(url);
        var result = [];
        if (json != null) {
            result = json.translations || [];
        }
        return result;
    },
    
}); %>
