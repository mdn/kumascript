#!/usr/bin/env node
// vim: ft=javascript
'use strict';

var path    = require('path')
  , Q       = require('q')
  , Qx      = require('qx')
  , fs      = require('fs')
  , readdir = Q.nfbind(fs.readdir)
  , stat    = Q.nfbind(fs.stat)
  , runner  = require(path.join(__dirname, '..', 'lib', 'tap_runner'))
  ;

var base = path.resolve(__dirname, '..', 'versioned-node');
var NAVE_BIN = path.join(__dirname, '..', '..', 'node_modules', '.bin', 'nave');

function isDirectory(entry) {
  function statHelper(info) {
    return info.isDirectory();
  }

  return stat(path.join(base, entry)).then(statHelper);
}

function onlyDirectories(entries) {
  return Qx.filter(entries, isDirectory);
}

function getEngineVersion(directory) {
  return Q.resolve(require(path.join(directory, 'package.json')).engines.node);
}

function installFailed(error) {
  console.log("Attempt to discover nave version failed: %s", error);
}

function install(visitor, base, target) {
  function makeNave(version) {
    var invocation = NAVE_BIN + ' use ' + version + ' node';
    return {
      command  : invocation,
      prefix   : path.join(base, target),
      version  : version,
      name     : 'node',
      duration : 0
    };
  }

  return getEngineVersion(path.join(base, target))
           .then(makeNave)
           .then(visitor)
           .fail(installFailed);
}

function visit(directories) {
  return Q.allSettled(directories.map(install.bind(null, runner, base)));
}

function finished() {
  console.log("navel run complete.");
}

function failed(error) {
  console.error(error.stack);
}

return readdir(base)
         .then(onlyDirectories)
         .then(visit)
         .done(finished, failed);
